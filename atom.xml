<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>莫问天涯</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-07-12T03:30:49.613Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>莫问天涯</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Apache Iceberg 、StarRocks</title>
    <link href="http://example.com/2025/07/12/Apache-Iceberg-%E3%80%81StarRocks/"/>
    <id>http://example.com/2025/07/12/Apache-Iceberg-%E3%80%81StarRocks/</id>
    <published>2025-07-12T03:29:52.000Z</published>
    <updated>2025-07-12T03:30:49.613Z</updated>
    
    <content type="html"><![CDATA[<p>Apache Iceberg 和 StarRocks 是大数据领域中不同定位的技术工具，前者是<strong>开源表格式（Table Format）</strong>，后者是<strong>高性能 OLAP 数据库</strong>，两者的设计目标、核心功能和适用场景有显著差异。以下从多个维度详细对比：</p><h3 id="一、核心定位与设计目标"><a href="#一、核心定位与设计目标" class="headerlink" title="一、核心定位与设计目标"></a><strong>一、核心定位与设计目标</strong></h3><table><thead><tr><th>维度</th><th>Apache Iceberg</th><th>StarRocks</th></tr></thead><tbody><tr><td><strong>核心定位</strong></td><td>开源表格式（Table Format），专注于<strong>数据湖中的大规模数据集管理</strong></td><td>分布式 OLAP 数据库，专注于<strong>高性能实时分析与交互式查询</strong></td></tr><tr><td><strong>设计目标</strong></td><td>解决数据湖中的一致性、元数据膨胀、Schema 演化、分区变更等管理难题，实现“数据湖表”的规范化管理</td><td>提供低延迟、高吞吐的分析能力，支持实时数据导入与复杂查询，满足业务决策、报表等场景需求</td></tr><tr><td><strong>本质属性</strong></td><td>不存储数据，也不负责计算，而是定义数据的组织方式（元数据、文件结构等），依赖外部存储和计算引擎</td><td>集成存储与计算的“一体化”数据库，自带存储引擎和计算引擎，端到端支持数据导入、存储、查询</td></tr></tbody></table><h3 id="二、核心功能与技术特性"><a href="#二、核心功能与技术特性" class="headerlink" title="二、核心功能与技术特性"></a><strong>二、核心功能与技术特性</strong></h3><h4 id="1-数据管理能力"><a href="#1-数据管理能力" class="headerlink" title="1. 数据管理能力"></a>1. <strong>数据管理能力</strong></h4><ul><li><p><strong>Apache Iceberg</strong>：<br>核心功能围绕“表的生命周期管理”展开，重点解决数据湖的痛点：</p><ul><li><strong>元数据分层管理</strong>：通过 Table Metadata、Snapshot、Manifest 三级结构管理元数据，避免依赖 Hive Metastore 等外部服务的瓶颈。</li><li><strong>强一致性与隔离性</strong>：支持表级快照（Snapshot）和原子操作，确保读写隔离，避免中间状态对查询的影响。</li><li><strong>Schema 与分区演化</strong>：允许动态修改表结构（添加&#x2F;删除字段、重命名）和分区策略（如从按天分区改为按小时），旧数据无需重写。</li><li><strong>时间旅行（Time Travel）</strong>：支持查询历史快照数据，方便数据回滚、审计或历史对比分析。</li></ul></li><li><p><strong>StarRocks</strong>：<br>核心功能围绕“高性能分析”展开，重点优化查询效率和实时性：</p><ul><li><strong>向量执行引擎</strong>：采用向量化执行技术，将批量数据按列处理，减少函数调用开销，提升 CPU 利用率。</li><li><strong>CBO 优化器</strong>：基于代价的查询优化器，能自动选择最优执行计划（如Join顺序、索引使用等），优化复杂查询性能。</li><li><strong>实时数据导入</strong>：支持 Kafka 实时流导入（毫秒级延迟）、Batch 批量导入（如从 HDFS、S3 加载），以及 MySQL 等数据库的同步。</li><li><strong>物化视图</strong>：预计算并存储查询结果，加速重复查询（如报表统计），支持自动刷新（实时&#x2F;定时）。</li></ul></li></ul><h3 id="三、技术架构"><a href="#三、技术架构" class="headerlink" title="三、技术架构"></a><strong>三、技术架构</strong></h3><h4 id="1-Apache-Iceberg-架构"><a href="#1-Apache-Iceberg-架构" class="headerlink" title="1. Apache Iceberg 架构"></a>1. <strong>Apache Iceberg 架构</strong></h4><ul><li><strong>分层元数据架构</strong>：<ul><li><strong>表元数据（Table Metadata）</strong>：存储表的基本信息（Schema、分区策略、当前快照 ID 等）。</li><li><strong>快照（Snapshot）</strong>：记录某一时刻的数据集版本，包含 Manifest 列表。</li><li><strong>Manifest</strong>：记录数据文件的元信息（路径、分区值、统计信息等）。</li><li><strong>数据文件</strong>：实际存储数据（支持 Parquet、ORC、Avro 等格式）。</li></ul></li><li><strong>存储与计算解耦</strong>：<ul><li>数据和元数据存储在分布式存储（如 HDFS、S3、OSS），不依赖本地磁盘。</li><li>计算依赖外部引擎（如 Spark、Flink、Trino 等），自身不提供计算能力。</li></ul></li></ul><h4 id="2-StarRocks-架构"><a href="#2-StarRocks-架构" class="headerlink" title="2. StarRocks 架构"></a>2. <strong>StarRocks 架构</strong></h4><ul><li><strong>Shared-Nothing 分布式架构</strong>：<ul><li><strong>FE（Frontend）</strong>：负责元数据管理、SQL 解析与优化、集群调度。</li><li><strong>BE（Backend）</strong>：负责数据存储、计算执行（如查询、导入），每个 BE 节点独立管理本地数据。</li><li><strong>CN（Compute Node，可选）</strong>：独立的计算节点，用于扩展计算能力（与 BE 分离，避免存储影响计算）。</li></ul></li><li><strong>存储与计算紧密结合</strong>：<ul><li>数据默认存储在 BE 节点的本地磁盘（支持 SSD&#x2F;HDD），也可扩展至对象存储（如 S3）作为冷热分层存储。</li><li>计算引擎内置（向量执行、CBO 等），无需依赖外部工具。</li></ul></li></ul><h3 id="三、适用场景"><a href="#三、适用场景" class="headerlink" title="三、适用场景"></a><strong>三、适用场景</strong></h3><table><thead><tr><th>场景类型</th><th>Apache Iceberg 适用场景</th><th>StarRocks 适用场景</th></tr></thead><tbody><tr><td><strong>数据规模与类型</strong></td><td>超大规模（PB 级甚至 EB 级）、非结构化&#x2F;半结构化&#x2F;结构化数据，需长期存储的历史数据</td><td>中大规模（TB 到 PB 级）、以结构化数据为主，需高频查询的业务数据</td></tr><tr><td><strong>核心需求</strong></td><td>数据湖构建、数据版本控制、Schema&#x2F;分区动态变更、跨引擎共享数据</td><td>实时分析（如监控大屏）、交互式查询（如业务报表）、高并发查询（如用户行为分析）</td></tr><tr><td><strong>典型场景</strong></td><td>- 企业级数据湖的标准化管理<br>- 机器学习训练数据的版本控制<br>- 跨团队共享海量历史数据</td><td>- 实时业务监控（如电商订单实时分析）<br>- 用户画像与行为分析<br>- 自助式 BI 报表查询</td></tr><tr><td><strong>不适用场景</strong></td><td>低延迟交互式查询、实时分析（需依赖计算引擎，本身无计算能力）</td><td>超大规模数据湖管理、Schema 频繁变更且需跨引擎共享（设计上更侧重“库内”分析）</td></tr></tbody></table><h3 id="四、集成生态"><a href="#四、集成生态" class="headerlink" title="四、集成生态"></a><strong>四、集成生态</strong></h3><ul><li><p><strong>Apache Iceberg</strong>：<br>依赖外部工具，生态以“表格式”为核心兼容各类引擎：</p><ul><li><strong>存储</strong>：HDFS、S3、GCS、OSS 等对象存储&#x2F;分布式文件系统。</li><li><strong>计算引擎</strong>：Spark（批处理）、Flink（流处理）、Trino&#x2F;Presto（查询）、Hive 等。</li><li><strong>数据格式</strong>：支持 Parquet、ORC、Avro 等列存格式。</li></ul></li><li><p><strong>StarRocks</strong>：<br>以“数据库”为核心，生态更侧重“端到端分析链路”：</p><ul><li><strong>数据源</strong>：支持从 Kafka（实时）、MySQL（CDC）、HDFS（批处理）、S3 等导入数据。</li><li><strong>查询接口</strong>：兼容 MySQL 协议，可直接通过 SQL 客户端、BI 工具（Tableau、Power BI）访问。</li><li><strong>集成工具</strong>：Flink（实时写入）、Spark（批量导入）、Airflow（调度）等。</li></ul></li></ul><h3 id="五、总结：核心差异与互补性"><a href="#五、总结：核心差异与互补性" class="headerlink" title="五、总结：核心差异与互补性"></a><strong>五、总结：核心差异与互补性</strong></h3><ul><li><strong>核心差异</strong>：Iceberg 是“数据湖的表管理工具”，解决“数据怎么存、怎么管”；StarRocks 是“OLAP 数据库”，解决“数据怎么查、怎么分析快”。</li><li><strong>互补性</strong>：实际业务中两者可结合使用——用 Iceberg 管理数据湖中的海量历史数据，通过 ETL 将需高频分析的数据同步到 StarRocks，利用 StarRocks 的高性能完成实时查询与报表生成。</li></ul><p>简言之，选择 Iceberg 还是 StarRocks，取决于需求是“管理大规模数据湖”还是“快速分析业务数据”。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Apache Iceberg 和 StarRocks 是大数据领域中不同定位的技术工具，前者是&lt;strong&gt;开源表格式（Table Format）&lt;/strong&gt;，后者是&lt;strong&gt;高性能 OLAP 数据库&lt;/strong&gt;，两者的设计目标、核心功能和适用场景有显著</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>制作 ky10.aarch64 离线yum源</title>
    <link href="http://example.com/2025/07/03/%E5%88%B6%E4%BD%9C-ky10-aarch64-%E7%A6%BB%E7%BA%BFyum%E6%BA%90/"/>
    <id>http://example.com/2025/07/03/%E5%88%B6%E4%BD%9C-ky10-aarch64-%E7%A6%BB%E7%BA%BFyum%E6%BA%90/</id>
    <published>2025-07-03T09:02:56.000Z</published>
    <updated>2025-07-03T09:03:31.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="制作-ky10-aarch64-离线yum源"><a href="#制作-ky10-aarch64-离线yum源" class="headerlink" title="制作 ky10.aarch64 离线yum源"></a>制作 ky10.aarch64 离线yum源</h1><h3 id="找一台可以联网的机器缓存需要的包文件"><a href="#找一台可以联网的机器缓存需要的包文件" class="headerlink" title="找一台可以联网的机器缓存需要的包文件"></a>找一台可以联网的机器缓存需要的包文件</h3><pre><code class="highlight bash">yumdownloader --resolve  --destdir=./ lsof tar zip unzip jq sshpass chrony psmisc vim curl wget docker openssh-clients python2</code></pre><h3 id="下载元数据工具"><a href="#下载元数据工具" class="headerlink" title="下载元数据工具"></a>下载元数据工具</h3><pre><code class="highlight bash">yum install createrepo -y</code></pre><h3 id="创建元数据"><a href="#创建元数据" class="headerlink" title="创建元数据"></a>创建元数据</h3><pre><code class="highlight bash">createrepo -o . -v .[root@localhost Packages]# lltotal 132796-rw-r--r-- 1 root root   165316 Jun 23 14:22 chrony-3.5-3.p01.ky10.aarch64.rpm-rw-r--r-- 1 root root 26121348 Nov 20  2023 containerd.io-1.6.18-3.1.el8.aarch64.rpm-rw-r--r-- 1 root root    37296 Nov 20  2023 container-selinux-2.138.0-1.p01.ky10.noarch.rpm-rw-r--r-- 1 root root   133676 Jun 23 14:22 curl-7.71.1-35.p02.ky10.aarch64.rpm-rw-r--r-- 1 root root 10995344 Nov 20  2023 docker-buildx-plugin-0.10.2-1.el8.aarch64.rpm-rw-r--r-- 1 root root 17258584 Nov 20  2023 docker-ce-19.03.15-3.el8.aarch64.rpm-rw-r--r-- 1 root root  6541208 Nov 20  2023 docker-ce-cli-23.0.1-1.el8.aarch64.rpm-rw-r--r-- 1 root root  9811892 Nov 20  2023 docker-compose-plugin-2.16.0-1.el8.aarch64.rpm-rw-r--r-- 1 root root    97944 Jun 30 10:31 dwz-0.13-1.ky10.aarch64.rpm-rw-r--r-- 1 root root    21336 Jun 30 10:31 efi-srpm-macros-4-4.p01.ky10.noarch.rpm-rw-r--r-- 1 root root  3145392 Jun 30 10:31 glibc-2.28-88.p18.ky10.aarch64.rpm-rw-r--r-- 1 root root 27426844 Jun 30 10:31 glibc-common-2.28-88.p18.ky10.aarch64.rpm-rw-r--r-- 1 root root  2687936 Jun 30 10:31 glibc-devel-2.28-88.p18.ky10.aarch64.rpm-rw-r--r-- 1 root root    18272 Jun 23 14:22 gpm-libs-1.20.7-23.ky10.aarch64.rpm-rw-r--r-- 1 root root    72020 Jun 23 14:22 iptables-1.8.5-2.ky10.aarch64.rpm-rw-r--r-- 1 root root    87600 Jun 23 14:22 iptables-help-1.8.5-2.ky10.noarch.rpm-rw-r--r-- 1 root root   114784 Jun 23 14:22 jq-1.5-18.ky10.aarch64.rpm-rw-r--r-- 1 root root    37132 Jun 23 14:22 jq-help-1.5-18.ky10.noarch.rpm-rw-r--r-- 1 root root  1638472 Jun 30 10:31 kernel-headers-4.19.90-52.48.v2207.ky10.aarch64.rpm-rw-r--r-- 1 root root    51816 Jun 30 10:31 kylin-rpm-config-30-18.p07.ky10.aarch64.rpm-rw-r--r-- 1 root root    20232 Jun 30 10:31 libattr-devel-2.4.48-15.ky10.aarch64.rpm-rw-r--r-- 1 root root   100456 Nov 20  2023 libcgroup-0.42.2-1.ky10.aarch64.rpm-rw-r--r-- 1 root root   100084 Jun 23 14:22 libcgroup-0.42.2-1.p03.ky10.aarch64.rpm-rw-r--r-- 1 root root   253444 Jun 23 14:22 libcurl-7.71.1-35.p02.ky10.aarch64.rpm-rw-r--r-- 1 root root    30012 Jun 30 10:31 libkysec-devel-3.3.6-33.se.12.ky10.aarch64.rpm-rw-r--r-- 1 root root    13884 Jun 30 10:31 libsecurity1-devel-1.1-17.se.05.ky10.aarch64.rpm-rw-r--r-- 1 root root    32984 Jun 23 14:22 libtool-ltdl-2.4.6-33.ky10.aarch64.rpm-rw-r--r-- 1 root root   114812 Jun 30 10:31 libxcrypt-devel-4.4.16-2.ky10.aarch64.rpm-rw-r--r-- 1 root root    89220 Jun 23 14:22 lsof-4.93.2-5.p01.ky10.aarch64.rpm-rw-r--r-- 1 root root   252708 Jun 23 14:22 openssh-8.2p1-16.p18.ky10.aarch64.rpm-rw-r--r-- 1 root root   464228 Jun 23 14:22 openssh-clients-8.2p1-16.p18.ky10.aarch64.rpm-rw-r--r-- 1 root root   335572 Jun 23 14:22 openssh-server-8.2p1-16.p18.ky10.aarch64.rpm-rw-r--r-- 1 root root   149936 Jun 23 14:22 psmisc-23.3-2.ky10.aarch64.rpm-rw-r--r-- 1 root root  6791388 Jun 30 10:31 python2-2.7.18-1.se.05.p03.ky10.aarch64.rpm-rw-r--r-- 1 root root  1926084 Jun 30 10:31 python2-debug-2.7.18-1.se.05.p03.ky10.aarch64.rpm-rw-r--r-- 1 root root  5153252 Jun 30 10:31 python2-devel-2.7.18-1.se.05.p03.ky10.aarch64.rpm-rw-r--r-- 1 root root    13536 Jun 30 10:31 python2-help-2.7.18-1.se.05.p03.ky10.noarch.rpm-rw-r--r-- 1 root root   527052 Jun 30 10:31 python2-setuptools-44.1.1-3.p01.ky10.noarch.rpm-rw-r--r-- 1 root root   344092 Jun 30 10:31 python2-tkinter-2.7.18-1.se.05.p03.ky10.aarch64.rpm-rw-r--r-- 1 root root    14500 Jun 30 10:31 python2-tools-2.7.18-1.se.05.p03.ky10.aarch64.rpm-rw-r--r-- 1 root root    22692 Jun 30 10:31 python3-rpm-generators-9-1.ky10.noarch.rpm-rw-r--r-- 1 root root     7968 Jun 30 10:31 qt5-srpm-macros-5.14.2-1.ky10.noarch.rpmdrwxr-xr-x 2 root root     4096 Jun 30 10:32 repodata-rw-r--r-- 1 root root    25288 Jun 23 14:22 sshpass-1.06-8.ky10.aarch64.rpm-rw-r--r-- 1 root root   787480 Jun 23 14:22 tar-1.32-4.ky10.aarch64.rpm-rw-r--r-- 1 root root  1111544 Jun 30 10:31 tk-8.6.10-2.ky10.aarch64.rpm-rw-r--r-- 1 root root   138796 Jun 23 14:22 unzip-6.0-47.ky10.aarch64.rpm-rw-r--r-- 1 root root  8021212 Jun 23 14:22 vim-common-9.0-19.p09.ky10.aarch64.rpm-rw-r--r-- 1 root root  1656496 Jun 23 14:22 vim-enhanced-9.0-19.p09.ky10.aarch64.rpm-rw-r--r-- 1 root root    23256 Jun 23 14:22 vim-filesystem-9.0-19.p09.ky10.noarch.rpm-rw-r--r-- 1 root root   648108 Jun 23 14:22 wget-1.20.3-6.ky10.aarch64.rpm-rw-r--r-- 1 root root   225892 Jun 23 14:22 zip-3.0-26.p01.ky10.aarch64.rpm[root@localhost Packages]#</code></pre><h3 id="下载-miniserve-作为文件服务器，做yum源服务"><a href="#下载-miniserve-作为文件服务器，做yum源服务" class="headerlink" title="下载 miniserve 作为文件服务器，做yum源服务"></a>下载 <code>miniserve</code> 作为文件服务器，做yum源服务</h3><p><a href="https://github.com/svenstaro/miniserve/releases">miniserve</a></p><h3 id="配置-service"><a href="#配置-service" class="headerlink" title="配置 service"></a>配置 <code>service</code></h3><pre><code class="highlight bash"><span class="built_in">cat</span> &gt; /etc/systemd/system/yum_repo.service &lt;&lt; <span class="string">&#x27;EOF&#x27;</span>[Unit]Description=yum_repoAfter=network.target[Service]Environment=<span class="string">&quot;RUST_LOG=info&quot;</span>Type=simpleUser=rootExecStart=/usr/local/bin/miniserve /dubhe/yum/yum.repo -v -F --hide-theme-selector --route-prefix /base -p 18080Restart=on-failureRestartSec=5s[Install]WantedBy=multi-user.targetEOFsystemctl <span class="built_in">enable</span> --now yum_repo</code></pre><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><pre><code class="highlight bash"><span class="built_in">cat</span> &gt; /etc/yum.repos.d/dubhe.repo &lt;&lt; <span class="string">&#x27;EOF&#x27;</span>[dubhe]name=dubhebaseurl = http://10.193.34.4:18080/base/<span class="variable">$basearch</span>/Packages/enabled=1gpgcheck=0EOF</code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre><code class="highlight bash">[root@localhost deploy]# yum  clean all0 files removed[root@localhost deploy]# yum install vimdubhe                                                                                                                                                                                                       21 MB/s |  66 kB     00:00    Dependencies resolved.=========================================================================================================================================================================================================================================== Package                                                     Architecture                                         Version                                                         Repository                                          Size===========================================================================================================================================================================================================================================Installing: vim-enhanced                                                aarch64                                              2:9.0-19.p09.ky10                                               dubhe                                              1.6 MInstalling dependencies: gpm-libs                                                    aarch64                                              1.20.7-23.ky10                                                  dubhe                                               18 k vim-common                                                  aarch64                                              2:9.0-19.p09.ky10                                               dubhe                                              7.6 M vim-filesystem                                              noarch                                               2:9.0-19.p09.ky10                                               dubhe                                               23 kTransaction Summary===========================================================================================================================================================================================================================================Install  4 PackagesTotal download size: 9.3 MInstalled size: 38 MIs this ok [y/N]: </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;制作-ky10-aarch64-离线yum源&quot;&gt;&lt;a href=&quot;#制作-ky10-aarch64-离线yum源&quot; class=&quot;headerlink&quot; title=&quot;制作 ky10.aarch64 离线yum源&quot;&gt;&lt;/a&gt;制作 ky10.aarch64 离线yu</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>centos做代理中转</title>
    <link href="http://example.com/2021/08/18/18/centos%E5%81%9A%E4%BB%A3%E7%90%86%E4%B8%AD%E8%BD%AC/"/>
    <id>http://example.com/2021/08/18/18/centos%E5%81%9A%E4%BB%A3%E7%90%86%E4%B8%AD%E8%BD%AC/</id>
    <published>2021-08-18T10:18:15.000Z</published>
    <updated>2021-08-18T10:25:40.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos做代理中转"><a href="#centos做代理中转" class="headerlink" title="centos做代理中转"></a>centos做代理中转</h1><p>使用 <a href="https://github.com/nadoo/glider">glider</a> 做代理中转，可以把有账号密码的代理转为没有账号密码的代理</p><blockquote><p>glider 是一个支持多种协议的转发代理，也是一个具有 ipset 管理功能（如 dnsmasq）的 dns&#x2F;dhcp 服务器 <br>我们可以将本地侦听器设置为代理服务器，并通过转发器将请求转发到互联网。</p></blockquote><pre><code class="highlight shell">             |Forwarder -----------------&gt;|Listener --&gt; |                            | Internet             |Forwarder --&gt; Forwarder-&gt;...|</code></pre><p>解压直接使用，并对外暴露服务端口</p><pre><code class="highlight shell"><span class="meta prompt_">#</span><span class="language-bash">运行程序</span>[root@node4 glider_0.13.2_linux_amd64]# ./glider -forward http://账号:密码@http-dyn.abuyun.com:9020   --listen :11000 -verbose2021/04/27 09:27:44 group.go:182: [group] only 1 forwarder found, disable health checking2021/04/27 09:27:44 mixed.go:68: [mixed] listening TCP on :80812021/04/27 09:27:44 server.go:105: [socks5] listening UDP on :8081<span class="meta prompt_"></span><span class="meta prompt_">#</span><span class="language-bash">应用请求结果：</span>2021/04/27 09:31:47 server.go:162: [http] 172.110.110.1:26447 &lt;-&gt; ip.3322.net:80 via http-dyn.abuyun.com:90202021/04/27 09:31:48 server.go:162: [http] 172.110.110.1:26448 &lt;-&gt; ip.3322.net:80 via http-dyn.abuyun.com:90202021/04/27 09:31:49 server.go:162: [http] 172.110.110.1:26459 &lt;-&gt; ip.3322.net:80 via http-dyn.abuyun.com:90202021/04/27 09:31:49 server.go:162: [http] 172.110.110.1:26460 &lt;-&gt; ip.3322.net:80 via http-dyn.abuyun.com:90202021/04/27 09:31:50 server.go:162: [http] 172.110.110.1:26465 &lt;-&gt; ip.3322.net:80 via http-dyn.abuyun.com:90202021/04/27 09:31:51 server.go:162: [http] 172.110.110.1:26466 &lt;-&gt; ip.3322.net:80 via http-dyn.abuyun.com:90202021/04/27 09:33:32 server.go:162: [http] 172.110.110.1:26574 &lt;-&gt; ip.3322.net:80 via http-dyn.abuyun.com:90202021/04/27 09:33:34 server.go:162: [http] 172.110.110.1:26579 &lt;-&gt; ip.3322.net:80 via http-dyn.abuyun.com:90202021/04/27 09:33:35 server.go:162: [http] 172.110.110.1:26582 &lt;-&gt; ip.3322.net:80 via http-dyn.abuyun.com:9020</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;centos做代理中转&quot;&gt;&lt;a href=&quot;#centos做代理中转&quot; class=&quot;headerlink&quot; title=&quot;centos做代理中转&quot;&gt;&lt;/a&gt;centos做代理中转&lt;/h1&gt;&lt;p&gt;使用 &lt;a href=&quot;https://github.com/nad</summary>
      
    
    
    
    
    <category term="代理" scheme="http://example.com/tags/%E4%BB%A3%E7%90%86/"/>
    
    <category term="代理转发" scheme="http://example.com/tags/%E4%BB%A3%E7%90%86%E8%BD%AC%E5%8F%91/"/>
    
    <category term="centos" scheme="http://example.com/tags/centos/"/>
    
  </entry>
  
  <entry>
    <title>centos断网环境下安装chrome</title>
    <link href="http://example.com/2021/08/18/18/centos%E6%96%AD%E7%BD%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85chrome/"/>
    <id>http://example.com/2021/08/18/18/centos%E6%96%AD%E7%BD%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85chrome/</id>
    <published>2021-08-18T02:02:35.000Z</published>
    <updated>2021-08-18T10:07:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos断网环境下安装chrome"><a href="#centos断网环境下安装chrome" class="headerlink" title="centos断网环境下安装chrome"></a>centos断网环境下安装chrome</h1><h2 id="离线缓存所有依赖包"><a href="#离线缓存所有依赖包" class="headerlink" title="离线缓存所有依赖包"></a>离线缓存所有依赖包</h2><h3 id="修改yum设置，让rpm包缓存到本地"><a href="#修改yum设置，让rpm包缓存到本地" class="headerlink" title="修改yum设置，让rpm包缓存到本地"></a>修改yum设置，让rpm包缓存到本地</h3><pre><code class="highlight shell"><span class="meta prompt_">#</span><span class="language-bash">修改yum设置，让rpm包缓存到本地</span>vi /etc/yum.conf<span class="meta prompt_"></span><span class="meta prompt_">#</span><span class="language-bash">修改keepcache为1</span>keepcache=1<span class="meta prompt_"></span><span class="meta prompt_">#</span><span class="language-bash">清空yum缓存</span>yum clean all</code></pre><h3 id="安装chrome"><a href="#安装chrome" class="headerlink" title="安装chrome"></a>安装chrome</h3><pre><code class="highlight shell"><span class="meta prompt_">#</span><span class="language-bash">写入源</span>vi /etc/yum.repos.d/google-chrome.repo[google-chrome]name=google-chromebaseurl=http://dl.google.com/linux/chrome/rpm/stable/x86_64enabled=1gpgcheck=1gpgkey=https://dl.google.com/linux/linux_signing_key.pub<span class="meta prompt_"></span><span class="meta prompt_"></span><span class="meta prompt_">#</span><span class="language-bash">安装</span>yum -y install google-chrome-stable --nogpgcheck</code></pre><p><img src="https://cdn.jsdelivr.net/gh/wanghubcc/img/202108/18/ddf921379399625b9342863230cbbc.png" alt="安装成功提示"></p><h3 id="复制缓存的依赖包"><a href="#复制缓存的依赖包" class="headerlink" title="复制缓存的依赖包"></a>复制缓存的依赖包</h3><p><img src="https://cdn.jsdelivr.net/gh/wanghubcc/img/202108/18/ac230e5be8d7a22f150ddb98704e9c.png" alt="缓存依赖包位置"><br><img src="https://cdn.jsdelivr.net/gh/wanghubcc/img/202108/18/511b04931124416801a69743c48562.png" alt="全部打包"><br><a href="https://github.com/wanghubcc/file01/releases/download/google-chrome-92/google-chrome-all.zip">打包好的centos7_chrome_v92</a></p><h2 id="把所有的依赖包上传至断网机器"><a href="#把所有的依赖包上传至断网机器" class="headerlink" title="把所有的依赖包上传至断网机器"></a>把所有的依赖包上传至断网机器</h2><h3 id="切换到依赖包目录下"><a href="#切换到依赖包目录下" class="headerlink" title="切换到依赖包目录下"></a>切换到依赖包目录下</h3><pre><code class="highlight shell"><span class="meta prompt_">#</span><span class="language-bash">强制安装所有依赖</span>rpm -ivh *.rpm --nodeps --force</code></pre><p>联网的机器安装成功，这里就没问题</p><pre><code class="highlight shell"><span class="meta prompt_">#</span><span class="language-bash">验证</span>[root@node4 packages]# google-chrome -versionGoogle Chrome 92.0.4515.131 [root@node4 packages]#</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;centos断网环境下安装chrome&quot;&gt;&lt;a href=&quot;#centos断网环境下安装chrome&quot; class=&quot;headerlink&quot; title=&quot;centos断网环境下安装chrome&quot;&gt;&lt;/a&gt;centos断网环境下安装chrome&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    
    <category term="chrome" scheme="http://example.com/tags/chrome/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>常用正则表达式整理</title>
    <link href="http://example.com/2021/08/16/16/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%95%B4%E7%90%86/"/>
    <id>http://example.com/2021/08/16/16/%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%95%B4%E7%90%86/</id>
    <published>2021-08-16T09:31:07.000Z</published>
    <updated>2021-08-16T09:40:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用正则表达式整理"><a href="#常用正则表达式整理" class="headerlink" title="常用正则表达式整理"></a>常用正则表达式整理</h1><h3 id="提取中文"><a href="#提取中文" class="headerlink" title="提取中文"></a>提取中文</h3><pre><code class="highlight shell">[\u4E00-\u9FFF]+</code></pre><p><img src="https://cdn.jsdelivr.net/gh/wanghubcc/img/202108/16/26a290b67a6e4b5c12f16897daf7e2.png" alt="示例"></p><h3 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h3><pre><code class="highlight text">一、校验数字的表达式数字：^[0-9]*$n位的数字：^\d&#123;n&#125;$至少n位的数字：^\d&#123;n,&#125;$m-n位的数字：^\d&#123;m,n&#125;$零和非零开头的数字：^(0|[1-9][0-9]*)$非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(\.[0-9]&#123;1,2&#125;)?$带1-2位小数的正数或负数：^(\-)?\d+(\.\d&#123;1,2&#125;)$正数、负数、和小数：^(\-|\+)?\d+(\.\d+)?$有两位小数的正实数：^[0-9]+(\.[0-9]&#123;2&#125;)?$有1~3位小数的正实数：^[0-9]+(\.[0-9]&#123;1,3&#125;)?$非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\+?[1-9][0-9]*$非零的负整数：^\-[1-9][]0-9&quot;*$ 或 ^-[1-9]\d*$非负整数：^\d+$ 或 ^[1-9]\d*|0$非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$非负浮点数：^\d+(\.\d+)?$ 或 ^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$非正浮点数：^((-\d+(\.\d+)?)|(0+(\.0+)?))$ 或 ^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$正浮点数：^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$ 或 ^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$负浮点数：^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$ 或 ^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$浮点数：^(-?\d+)(\.\d+)?$ 或 ^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$校验字符的表达式汉字：^[\u4e00-\u9fa5]&#123;0,&#125;$英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$长度为3-20的所有字符：^.&#123;3,20&#125;$由26个英文字母组成的字符串：^[A-Za-z]+$由26个大写英文字母组成的字符串：^[A-Z]+$由26个小写英文字母组成的字符串：^[a-z]+$由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w&#123;3,20&#125;$中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$可以输入含有^%&amp;&#x27;,;=?$\&quot;等字符：[^%&amp;&#x27;,;=?$\x22]+禁止输入含有~的字符：[^~\x22]+三、特殊需求表达式Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(\.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+\.?InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|4|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX)：^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$国内电话号码(0511-4405222、021-87888822)：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;电话号码正则表达式（支持手机号码，3-4位区号，7-8位直播号码，1－4位分机号）: ((\d&#123;11&#125;)|^((\d&#123;7,8&#125;)|(\d&#123;4&#125;|\d&#123;3&#125;)-(\d&#123;7,8&#125;)|(\d&#123;4&#125;|\d&#123;3&#125;)-(\d&#123;7,8&#125;)-(\d&#123;4&#125;|\d&#123;3&#125;|\d&#123;2&#125;|\d&#123;1&#125;)|(\d&#123;7,8&#125;)-(\d&#123;4&#125;|\d&#123;3&#125;|\d&#123;2&#125;|\d&#123;1&#125;))$)身份证号(15位、18位数字)，最后一位是校验位，可能为数字或字符X：(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w&#123;5,17&#125;$强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[a-zA-Z0-9]&#123;8,10&#125;$强密码(必须包含大小写字母和数字的组合，可以使用特殊字符，长度在8-10之间)：^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$钱的输入格式：有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧。下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$中文字符的正则表达式：[\u4e00-\u9fa5]双字节字符：[^\x00-\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))空白行的正则表达式：\n\s*\r (可以用来删除空白行)HTML标记的正则表达式：&lt;(\S*?)[^&gt;]*&gt;.*?|&lt;.*? /&gt; ( 首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始)中国邮政编码：[1-9]\d&#123;5&#125;(?!\d) (中国邮政编码为6位数字)IPv4地址：((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;)(\.((2(5[0-5]|[0-4]\d))|[0-1]?\d&#123;1,2&#125;))&#123;3&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;常用正则表达式整理&quot;&gt;&lt;a href=&quot;#常用正则表达式整理&quot; class=&quot;headerlink&quot; title=&quot;常用正则表达式整理&quot;&gt;&lt;/a&gt;常用正则表达式整理&lt;/h1&gt;&lt;h3 id=&quot;提取中文&quot;&gt;&lt;a href=&quot;#提取中文&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="正则表达式" scheme="http://example.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>docker安装postgres</title>
    <link href="http://example.com/2021/08/16/16/docker%E5%AE%89%E8%A3%85postgres/"/>
    <id>http://example.com/2021/08/16/16/docker%E5%AE%89%E8%A3%85postgres/</id>
    <published>2021-08-16T07:41:38.000Z</published>
    <updated>2021-08-16T07:50:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker安装postgres"><a href="#docker安装postgres" class="headerlink" title="docker安装postgres"></a>docker安装postgres</h1><pre><code class="highlight shell"><span class="meta prompt_">#</span><span class="language-bash">拉取镜像</span>docker pull postgres<span class="meta prompt_"></span><span class="meta prompt_">#</span><span class="language-bash">启动</span>docker run --name some-postgres -e POSTGRES_PASSWORD=123456 -p 5432:5432 -d postgres</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker安装postgres&quot;&gt;&lt;a href=&quot;#docker安装postgres&quot; class=&quot;headerlink&quot; title=&quot;docker安装postgres&quot;&gt;&lt;/a&gt;docker安装postgres&lt;/h1&gt;&lt;pre&gt;&lt;code class=</summary>
      
    
    
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
    <category term="postgres" scheme="http://example.com/tags/postgres/"/>
    
  </entry>
  
  <entry>
    <title>docker安装zookeeper</title>
    <link href="http://example.com/2021/08/16/16/docker%E5%AE%89%E8%A3%85zookeeper/"/>
    <id>http://example.com/2021/08/16/16/docker%E5%AE%89%E8%A3%85zookeeper/</id>
    <published>2021-08-16T05:33:50.000Z</published>
    <updated>2021-08-16T05:42:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker安装zookeeper"><a href="#docker安装zookeeper" class="headerlink" title="docker安装zookeeper"></a>docker安装zookeeper</h1><pre><code class="highlight shell"><span class="meta prompt_">#</span><span class="language-bash">拉取镜像</span>docker pull zookeeper<span class="meta prompt_"></span><span class="meta prompt_">#</span><span class="language-bash">创建挂载文件夹</span>mkdir -p /opt/zook<span class="meta prompt_"></span><span class="meta prompt_">#</span><span class="language-bash">启动容器</span>docker run -d -v /opt/zook:/data -v /opt/zook:/datalog  -e ZOO_MY_ID=1 -e ZOO_SERVERS=&#x27;server.1=172.110.110.101:2888:3888&#x27;  --net=host --name zookeeper --privileged zookeeper<span class="meta prompt_"></span><span class="meta prompt_">#</span><span class="language-bash">设置容器开机自启</span>docker update zookeeper --restart=always</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker安装zookeeper&quot;&gt;&lt;a href=&quot;#docker安装zookeeper&quot; class=&quot;headerlink&quot; title=&quot;docker安装zookeeper&quot;&gt;&lt;/a&gt;docker安装zookeeper&lt;/h1&gt;&lt;pre&gt;&lt;code cl</summary>
      
    
    
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
    <category term="zookeeper" scheme="http://example.com/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>docker安装mysql</title>
    <link href="http://example.com/2021/08/16/16/docker%E5%AE%89%E8%A3%85mysql/"/>
    <id>http://example.com/2021/08/16/16/docker%E5%AE%89%E8%A3%85mysql/</id>
    <published>2021-08-16T05:23:16.000Z</published>
    <updated>2021-08-16T05:29:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker安装mysql"><a href="#docker安装mysql" class="headerlink" title="docker安装mysql"></a>docker安装mysql</h1><pre><code class="highlight shell"><span class="meta prompt_">#</span><span class="language-bash">拉取镜像</span>docker pull mysql:5.7<span class="meta prompt_"></span><span class="meta prompt_"># </span><span class="language-bash">--name指定容器名字 -v目录挂载 -p指定端口映射  -e设置mysql参数 -d后台运行 -m限制内存使用</span>docker run -p 3306:3306 --name mysql \-v /mydata/mysql/log:/var/log/mysql \-v /mydata/mysql/data:/var/lib/mysql \-v /mydata/mysql/conf:/etc/mysql \-m 200m \-e MYSQL_ROOT_PASSWORD=123456 \-d mysql:5.7<span class="meta prompt_"></span><span class="meta prompt_">#</span><span class="language-bash">修改配置文件</span>vi /mydata/mysql/conf/my.conf [client]default-character-set=utf8[mysql]default-character-set=utf8[mysqld]init_connect=&#x27;SET collation_connection = utf8_unicode_ci&#x27;init_connect=&#x27;SET NAMES utf8&#x27;character-set-server=utf8collation-server=utf8_unicode_ciskip-character-set-client-handshakeskip-name-resolve<span class="meta prompt_"></span><span class="meta prompt_">#</span><span class="language-bash">重启服务</span>docker restart mysql<span class="meta prompt_"></span><span class="meta prompt_">#</span><span class="language-bash">设置容器开机自启</span>docker update mysql --restart=always</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker安装mysql&quot;&gt;&lt;a href=&quot;#docker安装mysql&quot; class=&quot;headerlink&quot; title=&quot;docker安装mysql&quot;&gt;&lt;/a&gt;docker安装mysql&lt;/h1&gt;&lt;pre&gt;&lt;code class=&quot;highlight s</summary>
      
    
    
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
    <category term="mysql" scheme="http://example.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>docker安装</title>
    <link href="http://example.com/2021/08/16/16/docker%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2021/08/16/16/docker%E5%AE%89%E8%A3%85/</id>
    <published>2021-08-16T05:11:42.000Z</published>
    <updated>2021-08-16T05:29:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="centos7安装docker"><a href="#centos7安装docker" class="headerlink" title="centos7安装docker"></a>centos7安装docker</h1><pre><code class="highlight shell"><span class="meta prompt_">#</span><span class="language-bash">卸载系统之前的docker</span> sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine                  sudo yum install -y yum-utils<span class="meta prompt_"></span><span class="meta prompt_"># </span><span class="language-bash">配置镜像</span>sudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo<span class="meta prompt_"></span><span class="meta prompt_">#</span><span class="language-bash">安装docker</span>    sudo yum install docker-ce docker-ce-cli containerd.io<span class="meta prompt_"></span><span class="meta prompt_">#</span><span class="language-bash">启动docker服务</span>sudo systemctl start docker <span class="meta prompt_"></span><span class="meta prompt_">#</span><span class="language-bash">查看版本，是否安装成功</span>docker -v<span class="meta prompt_"></span><span class="meta prompt_">#</span><span class="language-bash">配置镜像加速</span>sudo mkdir -p /etc/dockersudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;&#123;  &quot;registry-mirrors&quot;: [&quot;https://g2i6jdnj.mirror.aliyuncs.com&quot;]&#125;EOF<span class="meta prompt_"></span><span class="meta prompt_">#</span><span class="language-bash">重启服务</span>sudo systemctl daemon-reloadsudo systemctl restart docker</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;centos7安装docker&quot;&gt;&lt;a href=&quot;#centos7安装docker&quot; class=&quot;headerlink&quot; title=&quot;centos7安装docker&quot;&gt;&lt;/a&gt;centos7安装docker&lt;/h1&gt;&lt;pre&gt;&lt;code class=&quot;hig</summary>
      
    
    
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>postman打开时瞬间黑屏1s</title>
    <link href="http://example.com/2021/08/16/16/postman%E6%89%93%E5%BC%80%E6%97%B6%E7%9E%AC%E9%97%B4%E9%BB%91%E5%B1%8F1s/"/>
    <id>http://example.com/2021/08/16/16/postman%E6%89%93%E5%BC%80%E6%97%B6%E7%9E%AC%E9%97%B4%E9%BB%91%E5%B1%8F1s/</id>
    <published>2021-08-16T04:25:06.000Z</published>
    <updated>2021-08-16T04:38:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="postman打开时瞬间黑屏1s解决方案"><a href="#postman打开时瞬间黑屏1s解决方案" class="headerlink" title="postman打开时瞬间黑屏1s解决方案"></a>postman打开时瞬间黑屏1s解决方案</h1><ul><li><p>在环境变量中加入POSTMAN_DISABLE_GPU &#x3D; true</p></li><li><p>重新打开postman</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/wanghubcc/img/202108/16/23df65c69822793fa2750acd40308c.png" alt="在环境变量中加入POSTMAN_DISABLE_GPU &#x3D; true"></p><p><img src="https://cdn.jsdelivr.net/gh/wanghubcc/img/202108/16/81c7db49cace5ed587ccba20262a9e.png" alt="重新打开postman"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;postman打开时瞬间黑屏1s解决方案&quot;&gt;&lt;a href=&quot;#postman打开时瞬间黑屏1s解决方案&quot; class=&quot;headerlink&quot; title=&quot;postman打开时瞬间黑屏1s解决方案&quot;&gt;&lt;/a&gt;postman打开时瞬间黑屏1s解决方案&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="解决方案" scheme="http://example.com/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    <category term="postman" scheme="http://example.com/tags/postman/"/>
    
  </entry>
  
  <entry>
    <title>推送博客时出现错误解决方案</title>
    <link href="http://example.com/2021/08/13/13/%E6%8E%A8%E9%80%81%E5%8D%9A%E5%AE%A2%E6%97%B6%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://example.com/2021/08/13/13/%E6%8E%A8%E9%80%81%E5%8D%9A%E5%AE%A2%E6%97%B6%E5%87%BA%E7%8E%B0%E9%94%99%E8%AF%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2021-08-13T09:20:47.000Z</published>
    <updated>2021-08-16T04:26:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Failed-to-connect-to-github-com-port-443-Timed-out"><a href="#Failed-to-connect-to-github-com-port-443-Timed-out" class="headerlink" title="Failed to connect to github.com port 443: Timed out"></a>Failed to connect to github.com port 443: Timed out</h3><h5 id="在推送博客时出现错误如下：Failed-to-connect-to-github-com-port-443-Timed-out"><a href="#在推送博客时出现错误如下：Failed-to-connect-to-github-com-port-443-Timed-out" class="headerlink" title="在推送博客时出现错误如下：Failed to connect to github.com port 443: Timed out"></a>在推送博客时出现错误如下：Failed to connect to github.com port 443: Timed out</h5><pre><code class="highlight shell">Failed to connect to github.com port 443: Timed out</code></pre><p>解决办法，执行如下命令（一般是挂代理引起的）</p><pre><code class="highlight shell">git config --global --unset http.proxy</code></pre><p>再次推送</p><h3 id="OpenSSL-SSL-read-Connection-was-reset-errno-10054"><a href="#OpenSSL-SSL-read-Connection-was-reset-errno-10054" class="headerlink" title="OpenSSL SSL_read: Connection was reset, errno 10054"></a>OpenSSL SSL_read: Connection was reset, errno 10054</h3><h5 id="出现错误：OpenSSL-SSL-read-Connection-was-reset-errno-10054"><a href="#出现错误：OpenSSL-SSL-read-Connection-was-reset-errno-10054" class="headerlink" title="出现错误：OpenSSL SSL_read: Connection was reset, errno 10054"></a>出现错误：OpenSSL SSL_read: Connection was reset, errno 10054</h5><pre><code class="highlight shell">OpenSSL SSL_read: Connection was reset, errno 10054</code></pre><p>执行命令，解除ssl验证（每次出现错误都需要重新执行）</p><pre><code class="highlight shell">git config --global http.sslVerify &quot;false&quot;</code></pre><p>再次推送</p><h3 id="The-requested-URL-returned-error-403"><a href="#The-requested-URL-returned-error-403" class="headerlink" title="The requested URL returned error: 403"></a>The requested URL returned error: 403</h3><pre><code class="highlight html">解决办法: 控制面板 -- &gt;  window 凭据 删除之前的就好了,再次上传时就会提示需要输入当前仓库的账号和密码</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Failed-to-connect-to-github-com-port-443-Timed-out&quot;&gt;&lt;a href=&quot;#Failed-to-connect-to-github-com-port-443-Timed-out&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="解决方案" scheme="http://example.com/tags/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>使用chromedriver打印日志</title>
    <link href="http://example.com/2021/08/13/13/%E4%BD%BF%E7%94%A8chromedriver%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97/"/>
    <id>http://example.com/2021/08/13/13/%E4%BD%BF%E7%94%A8chromedriver%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97/</id>
    <published>2021-08-13T08:36:00.000Z</published>
    <updated>2021-08-18T02:03:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用chromedriver打印日志"><a href="#使用chromedriver打印日志" class="headerlink" title="使用chromedriver打印日志"></a>使用chromedriver打印日志</h1><h3 id="打印日志，并获取响应状态码"><a href="#打印日志，并获取响应状态码" class="headerlink" title="打印日志，并获取响应状态码"></a>打印日志，并获取响应状态码</h3><pre><code class="highlight java"><span class="keyword">package</span> com.wzq.gbif;<span class="keyword">import</span> java.util.Iterator;<span class="keyword">import</span> java.util.logging.Level;<span class="keyword">import</span> org.json.JSONException;<span class="keyword">import</span> org.json.JSONObject;<span class="keyword">import</span> org.openqa.selenium.chrome.ChromeDriver;<span class="keyword">import</span> org.openqa.selenium.chrome.ChromeOptions;<span class="keyword">import</span> org.openqa.selenium.logging.LogEntries;<span class="keyword">import</span> org.openqa.selenium.logging.LogEntry;<span class="keyword">import</span> org.openqa.selenium.logging.LogType;<span class="keyword">import</span> org.openqa.selenium.logging.LoggingPreferences;<span class="keyword">import</span> org.openqa.selenium.remote.DesiredCapabilities;<span class="comment">/**</span><span class="comment"> * <span class="doctag">@author</span> wang</span><span class="comment"> * <span class="doctag">@version</span> 1.0</span><span class="comment"> * <span class="doctag">@date</span> 2021/8/13 16:50</span><span class="comment"> */</span><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> &#123;    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;        downloadPage(<span class="string">&quot;https://www.baidu.com/&quot;</span>);    &#125;    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">downloadPage</span><span class="params">(String url)</span> &#123;        <span class="type">ChromeDriver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="literal">null</span>;        <span class="keyword">try</span> &#123;            <span class="type">ChromeOptions</span> <span class="variable">options</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChromeOptions</span>();            <span class="type">DesiredCapabilities</span> <span class="variable">cap</span> <span class="operator">=</span> DesiredCapabilities.chrome();            cap.setCapability(ChromeOptions.CAPABILITY, options);            <span class="type">LoggingPreferences</span> <span class="variable">logPrefs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoggingPreferences</span>();            logPrefs.enable(LogType.PERFORMANCE, Level.ALL);            options.setCapability(<span class="string">&quot;goog:loggingPrefs&quot;</span>, logPrefs);            driver = <span class="keyword">new</span> <span class="title class_">ChromeDriver</span>(options);            <span class="comment">// navigate to the page</span>            System.out.println(<span class="string">&quot;Navigate to &quot;</span> + url);            driver.navigate().to(url);            <span class="comment">// and capture the last recorded url (it may be a redirect, or the</span>            <span class="comment">// original url)</span>            <span class="type">String</span> <span class="variable">currentURL</span> <span class="operator">=</span> driver.getCurrentUrl();            <span class="type">LogEntries</span> <span class="variable">logs</span> <span class="operator">=</span> driver.manage().logs().get(<span class="string">&quot;performance&quot;</span>);            <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> -<span class="number">1</span>;            System.out.println(<span class="string">&quot;\\nList of log entries:\\n&quot;</span>);            <span class="keyword">for</span> (Iterator&lt;LogEntry&gt; it = logs.iterator(); it.hasNext(); ) &#123;                <span class="type">LogEntry</span> <span class="variable">entry</span> <span class="operator">=</span> it.next();                <span class="keyword">try</span> &#123;                    <span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(entry.getMessage());                    System.out.println(json.toString());                    <span class="type">JSONObject</span> <span class="variable">message</span> <span class="operator">=</span> json.getJSONObject(<span class="string">&quot;message&quot;</span>);                    <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> message.getString(<span class="string">&quot;method&quot;</span>);                    <span class="keyword">if</span> (method != <span class="literal">null</span> &amp;&amp; <span class="string">&quot;Network.responseReceived&quot;</span>.equals(method)) &#123;                        <span class="type">JSONObject</span> <span class="variable">params</span> <span class="operator">=</span> message.getJSONObject(<span class="string">&quot;params&quot;</span>);                        <span class="type">JSONObject</span> <span class="variable">response</span> <span class="operator">=</span> params.getJSONObject(<span class="string">&quot;response&quot;</span>);                        <span class="type">String</span> <span class="variable">messageUrl</span> <span class="operator">=</span> response.getString(<span class="string">&quot;url&quot;</span>);                        <span class="keyword">if</span> (currentURL.equals(messageUrl)) &#123;                            status = response.getInt(<span class="string">&quot;status&quot;</span>);                            System.out.println(messageUrl + <span class="string">&quot;: &quot;</span> + status);                            System.out.println(<span class="string">&quot;headers: &quot;</span> + response.get(<span class="string">&quot;headers&quot;</span>));                        &#125;                    &#125;                &#125; <span class="keyword">catch</span> (JSONException e) &#123;                    <span class="comment">// TODO Auto-generated catch block</span>                    e.printStackTrace();                &#125;            &#125;            System.out.println(<span class="string">&quot;\nstatus code: &quot;</span> + status);        &#125; <span class="keyword">finally</span> &#123;            <span class="keyword">if</span> (driver != <span class="literal">null</span>) &#123;                driver.quit();            &#125;        &#125;    &#125;&#125;</code></pre><h3 id="打印日志信息"><a href="#打印日志信息" class="headerlink" title="打印日志信息"></a>打印日志信息</h3><pre><code class="highlight shell">Navigate to https://www.baidu.com/\nList of log entries:\n&#123;&quot;webview&quot;:&quot;4093F206401AE297E4EFF7BEE9AC3FD7&quot;,&quot;message&quot;:&#123;&quot;method&quot;:&quot;Network.requestWillBeSent&quot;,&quot;params&quot;:&#123;&quot;request&quot;:&#123;&quot;headers&quot;:https://www.baidu.com/: 200headers: &#123;&quot;Transfer-Encoding&quot;:&quot;chunked&quot;,&quot;Server&quot;:&quot;BWS\/1.1&quot;,&quot;X-Ua-Compatible&quot;:&quot;IE=Edge,chrome=1&quot;,&quot;Connection&quot;:&quot;keep-alive&quot;,&quot;P3p&quot;:&quot;CP=\&quot; OTI DSP COR IVA OUR IND COM \&quot;\nCP=\&quot; OTI DSP COR IVA OUR IND COM \&quot;&quot;,&quot;Date&quot;:&quot;Fri, 13 Aug 2021 08:59:41 GMT&quot;,&quot;X-Frame-Options&quot;:&quot;sameorigin&quot;,&quot;Strict-Transport-Security&quot;:&quot;max-age=172800&quot;,&quot;Cache-Control&quot;:&quot;private&quot;,&quot;Bdpagetype&quot;:&quot;1&quot;,&quot;Content-Encoding&quot;:&quot;gzip&quot;,&quot;Traceid&quot;:&quot;162884518124046397549622976489859333826&quot;,&quot;Set-Cookie&quot;:&quot;BAIDUID=F1C5FC92CC8A0F4C4BCC90CD65D5F92D:FG=1; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=\/; domain=.baidu.com\nBIDUPSID=F1C5FC92CC8A0F4C4BCC90CD65D5F92D; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=\/; domain=.baidu.com\nPSTM=1628845181; expires=Thu, 31-Dec-37 23:55:55 GMT; max-age=2147483647; path=\/; domain=.baidu.com\nBAIDUID=F1C5FC92CC8A0F4C11A03438D50332A3:FG=1; max-age=31536000; expires=Sat, 13-Aug-22 08:59:41 GMT; domain=.baidu.com; path=\/; version=1; comment=bd\nBDSVRTM=0; path=\/\nBD_HOME=1; path=\/\nH_PS_PSSID=34334_34369_31660_34404_34004_34092_34106_34111_26350_34422_22158_34390; path=\/; domain=.baidu.com&quot;,&quot;Bdqid&quot;:&quot;0x858bae2200003ec2&quot;,&quot;Expires&quot;:&quot;Fri, 13 Aug 2021 08:59:20 GMT&quot;,&quot;Content-Type&quot;:&quot;text\/html;charset=utf-8&quot;&#125;…………status code: 200</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用chromedriver打印日志&quot;&gt;&lt;a href=&quot;#使用chromedriver打印日志&quot; class=&quot;headerlink&quot; title=&quot;使用chromedriver打印日志&quot;&gt;&lt;/a&gt;使用chromedriver打印日志&lt;/h1&gt;&lt;h3 id=&quot;打</summary>
      
    
    
    
    
    <category term="chrome" scheme="http://example.com/tags/chrome/"/>
    
    <category term="笔记" scheme="http://example.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="信息采集" scheme="http://example.com/tags/%E4%BF%A1%E6%81%AF%E9%87%87%E9%9B%86/"/>
    
  </entry>
  
</feed>
